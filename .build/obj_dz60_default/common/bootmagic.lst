   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LVL0:
  14               	.LFB106:
  15               		.file 1 "tmk_core/common/bootmagic.c"
   1:tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:tmk_core/common/bootmagic.c **** #include "wait.h"
   4:tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:tmk_core/common/bootmagic.c **** #include "debug.h"
   7:tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:tmk_core/common/bootmagic.c **** #include "host.h"
   9:tmk_core/common/bootmagic.c **** #include "action_layer.h"
  10:tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  11:tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  12:tmk_core/common/bootmagic.c **** 
  13:tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  14:tmk_core/common/bootmagic.c **** 
  15:tmk_core/common/bootmagic.c **** /** \brief Bootmagic
  16:tmk_core/common/bootmagic.c ****  *
  17:tmk_core/common/bootmagic.c ****  * FIXME: needs doc
  18:tmk_core/common/bootmagic.c ****  */
  19:tmk_core/common/bootmagic.c **** void bootmagic(void) {
  20:tmk_core/common/bootmagic.c ****     /* check signature */
  21:tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  22:tmk_core/common/bootmagic.c ****         eeconfig_init();
  23:tmk_core/common/bootmagic.c ****     }
  24:tmk_core/common/bootmagic.c **** 
  25:tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  26:tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  27:tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  28:tmk_core/common/bootmagic.c ****     while (scan--) {
  29:tmk_core/common/bootmagic.c ****         matrix_scan();
  30:tmk_core/common/bootmagic.c ****         wait_ms(10);
  31:tmk_core/common/bootmagic.c ****     }
  32:tmk_core/common/bootmagic.c ****     print("done.\n");
  33:tmk_core/common/bootmagic.c **** 
  34:tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  35:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  36:tmk_core/common/bootmagic.c ****         return;
  37:tmk_core/common/bootmagic.c ****     }
  38:tmk_core/common/bootmagic.c **** 
  39:tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  40:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  41:tmk_core/common/bootmagic.c ****         eeconfig_init();
  42:tmk_core/common/bootmagic.c ****     }
  43:tmk_core/common/bootmagic.c **** 
  44:tmk_core/common/bootmagic.c ****     /* bootloader */
  45:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  46:tmk_core/common/bootmagic.c ****         bootloader_jump();
  47:tmk_core/common/bootmagic.c ****     }
  48:tmk_core/common/bootmagic.c **** 
  49:tmk_core/common/bootmagic.c ****     /* debug enable */
  50:tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  51:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  52:tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  53:tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  54:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  55:tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  56:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  57:tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  58:tmk_core/common/bootmagic.c ****         } else {
  59:tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  60:tmk_core/common/bootmagic.c ****         }
  61:tmk_core/common/bootmagic.c ****     }
  62:tmk_core/common/bootmagic.c ****     eeconfig_update_debug(debug_config.raw);
  63:tmk_core/common/bootmagic.c **** 
  64:tmk_core/common/bootmagic.c ****     /* keymap config */
  65:tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  66:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  67:tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  68:tmk_core/common/bootmagic.c ****     }
  69:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  70:tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  71:tmk_core/common/bootmagic.c ****     }
  72:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  73:tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  74:tmk_core/common/bootmagic.c ****     }
  75:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  76:tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  77:tmk_core/common/bootmagic.c ****     }
  78:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  79:tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  80:tmk_core/common/bootmagic.c ****     }
  81:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  82:tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  83:tmk_core/common/bootmagic.c ****     }
  84:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  85:tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  86:tmk_core/common/bootmagic.c ****     }
  87:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  88:tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  89:tmk_core/common/bootmagic.c ****     }
  90:tmk_core/common/bootmagic.c ****     eeconfig_update_keymap(keymap_config.raw);
  91:tmk_core/common/bootmagic.c **** 
  92:tmk_core/common/bootmagic.c ****     /* default layer */
  93:tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  94:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) {
  95:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 0);
  96:tmk_core/common/bootmagic.c ****     }
  97:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) {
  98:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 1);
  99:tmk_core/common/bootmagic.c ****     }
 100:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) {
 101:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 2);
 102:tmk_core/common/bootmagic.c ****     }
 103:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) {
 104:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 3);
 105:tmk_core/common/bootmagic.c ****     }
 106:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) {
 107:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 4);
 108:tmk_core/common/bootmagic.c ****     }
 109:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) {
 110:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 5);
 111:tmk_core/common/bootmagic.c ****     }
 112:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) {
 113:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 6);
 114:tmk_core/common/bootmagic.c ****     }
 115:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) {
 116:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 7);
 117:tmk_core/common/bootmagic.c ****     }
 118:tmk_core/common/bootmagic.c ****     if (default_layer) {
 119:tmk_core/common/bootmagic.c ****         eeconfig_update_default_layer(default_layer);
 120:tmk_core/common/bootmagic.c ****         default_layer_set((layer_state_t)default_layer);
 121:tmk_core/common/bootmagic.c ****     } else {
 122:tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 123:tmk_core/common/bootmagic.c ****         default_layer_set((layer_state_t)default_layer);
 124:tmk_core/common/bootmagic.c ****     }
 125:tmk_core/common/bootmagic.c ****     /* Also initialize layer state to trigger callback functions for layer_state */
 126:tmk_core/common/bootmagic.c ****     layer_state_set_kb((layer_state_t)layer_state);
 127:tmk_core/common/bootmagic.c **** 
 128:tmk_core/common/bootmagic.c ****     /* EE_HANDS handedness */
 129:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EE_HANDS_LEFT)) {
 130:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(true);
 131:tmk_core/common/bootmagic.c ****     }
 132:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EE_HANDS_RIGHT)) {
 133:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(false);
 134:tmk_core/common/bootmagic.c ****     }
 135:tmk_core/common/bootmagic.c **** }
 136:tmk_core/common/bootmagic.c **** 
 137:tmk_core/common/bootmagic.c **** /** \brief Scan Keycode
 138:tmk_core/common/bootmagic.c ****  *
 139:tmk_core/common/bootmagic.c ****  * FIXME: needs doc
 140:tmk_core/common/bootmagic.c ****  */
 141:tmk_core/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode) {
  16               		.loc 1 141 43 view -0
  17               		.cfi_startproc
  18               		.loc 1 141 43 is_stmt 0 view .LVU1
  19 0000 AF92      		push r10
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 10, -2
  23 0002 BF92      		push r11
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 11, -3
  27 0004 CF92      		push r12
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 12, -4
  31 0006 DF92      		push r13
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 13, -5
  35 0008 EF92      		push r14
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 14, -6
  39 000a FF92      		push r15
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 15, -7
  43 000c 0F93      		push r16
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 16, -8
  47 000e 1F93      		push r17
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 17, -9
  51 0010 CF93      		push r28
  52               	.LCFI8:
  53               		.cfi_def_cfa_offset 11
  54               		.cfi_offset 28, -10
  55               	/* prologue: function */
  56               	/* frame size = 0 */
  57               	/* stack size = 9 */
  58               	.L__stack_usage = 9
 142:tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  59               		.loc 1 142 5 is_stmt 1 view .LVU2
  60               	.LBB4:
  61               		.loc 1 142 10 view .LVU3
  62               	.LVL1:
  63               		.loc 1 142 25 view .LVU4
  64               		.loc 1 142 18 is_stmt 0 view .LVU5
  65 0012 C0E0      		ldi r28,0
  66               	.LBB5:
  67               	.LBB6:
 143:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 144:tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 145:tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1 << c)) {
  68               		.loc 1 145 47 view .LVU6
  69 0014 CC24      		clr r12
  70 0016 C394      		inc r12
  71 0018 D12C      		mov r13,__zero_reg__
 146:tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){.row = r, .col = c})) {
  72               		.loc 1 146 29 view .LVU7
  73 001a E82E      		mov r14,r24
  74 001c F12C      		mov r15,__zero_reg__
  75               	.LVL2:
  76               	.L7:
  77               		.loc 1 146 29 view .LVU8
  78               	.LBE6:
 143:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  79               		.loc 1 143 9 is_stmt 1 view .LVU9
 143:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  80               		.loc 1 143 35 is_stmt 0 view .LVU10
  81 001e 8C2F      		mov r24,r28
  82 0020 0E94 0000 		call matrix_get_row
  83               	.LVL3:
  84 0024 5C01      		movw r10,r24
  85               	.LVL4:
 144:tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1 << c)) {
  86               		.loc 1 144 9 is_stmt 1 view .LVU11
  87               	.LBB7:
 144:tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1 << c)) {
  88               		.loc 1 144 14 view .LVU12
 144:tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1 << c)) {
  89               		.loc 1 144 29 view .LVU13
  90               	.LBE7:
 143:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  91               		.loc 1 143 35 is_stmt 0 view .LVU14
  92 0026 10E0      		ldi r17,0
  93 0028 00E0      		ldi r16,0
  94               	.LVL5:
  95               	.L3:
  96               	.LBB8:
 145:tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){.row = r, .col = c})) {
  97               		.loc 1 145 13 is_stmt 1 view .LVU15
 145:tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){.row = r, .col = c})) {
  98               		.loc 1 145 47 is_stmt 0 view .LVU16
  99 002a C601      		movw r24,r12
 100 002c 002E      		mov r0,r16
 101 002e 00C0      		rjmp 2f
 102               		1:
 103 0030 880F      		lsl r24
 104 0032 991F      		rol r25
 105               		2:
 106 0034 0A94      		dec r0
 107 0036 02F4      		brpl 1b
 145:tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){.row = r, .col = c})) {
 108               		.loc 1 145 28 view .LVU17
 109 0038 8A21      		and r24,r10
 110 003a 9B21      		and r25,r11
 145:tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){.row = r, .col = c})) {
 111               		.loc 1 145 16 view .LVU18
 112 003c 892B      		or r24,r25
 113 003e 01F4      		brne .L2
 114               	.L6:
 144:tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1 << c)) {
 115               		.loc 1 144 46 is_stmt 1 view .LVU19
 116               	.LVL6:
 144:tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1 << c)) {
 117               		.loc 1 144 29 view .LVU20
 118 0040 0F5F      		subi r16,-1
 119 0042 1F4F      		sbci r17,-1
 120               	.LVL7:
 144:tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1 << c)) {
 121               		.loc 1 144 9 is_stmt 0 view .LVU21
 122 0044 0F30      		cpi r16,15
 123 0046 1105      		cpc r17,__zero_reg__
 124 0048 01F4      		brne .L3
 125               	.LBE8:
 126               	.LBE5:
 142:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 127               		.loc 1 142 42 is_stmt 1 discriminator 2 view .LVU22
 142:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 128               		.loc 1 142 43 is_stmt 0 discriminator 2 view .LVU23
 129 004a CF5F      		subi r28,lo8(-(1))
 130               	.LVL8:
 142:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 131               		.loc 1 142 25 is_stmt 1 discriminator 2 view .LVU24
 142:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 132               		.loc 1 142 5 is_stmt 0 discriminator 2 view .LVU25
 133 004c C530      		cpi r28,lo8(5)
 134 004e 01F4      		brne .L7
 135               	.LBE4:
 147:tmk_core/common/bootmagic.c ****                     return true;
 148:tmk_core/common/bootmagic.c ****                 }
 149:tmk_core/common/bootmagic.c ****             }
 150:tmk_core/common/bootmagic.c ****         }
 151:tmk_core/common/bootmagic.c ****     }
 152:tmk_core/common/bootmagic.c ****     return false;
 136               		.loc 1 152 12 view .LVU26
 137 0050 80E0      		ldi r24,0
 138               	.LVL9:
 139               	.L1:
 140               	/* epilogue start */
 153:tmk_core/common/bootmagic.c **** }
 141               		.loc 1 153 1 view .LVU27
 142 0052 CF91      		pop r28
 143               	.LVL10:
 144               		.loc 1 153 1 view .LVU28
 145 0054 1F91      		pop r17
 146 0056 0F91      		pop r16
 147 0058 FF90      		pop r15
 148 005a EF90      		pop r14
 149               	.LVL11:
 150               		.loc 1 153 1 view .LVU29
 151 005c DF90      		pop r13
 152 005e CF90      		pop r12
 153 0060 BF90      		pop r11
 154 0062 AF90      		pop r10
 155               	.LVL12:
 156               		.loc 1 153 1 view .LVU30
 157 0064 0895      		ret
 158               	.LVL13:
 159               	.L2:
 160               	.LBB11:
 161               	.LBB10:
 162               	.LBB9:
 146:tmk_core/common/bootmagic.c ****                     return true;
 163               		.loc 1 146 17 is_stmt 1 view .LVU31
 146:tmk_core/common/bootmagic.c ****                     return true;
 164               		.loc 1 146 32 is_stmt 0 view .LVU32
 165 0066 602F      		mov r22,r16
 166 0068 7C2F      		mov r23,r28
 167 006a 80E0      		ldi r24,0
 168 006c 0E94 0000 		call keymap_key_to_keycode
 169               	.LVL14:
 146:tmk_core/common/bootmagic.c ****                     return true;
 170               		.loc 1 146 20 view .LVU33
 171 0070 E816      		cp r14,r24
 172 0072 F906      		cpc r15,r25
 173 0074 01F4      		brne .L6
 147:tmk_core/common/bootmagic.c ****                     return true;
 174               		.loc 1 147 28 view .LVU34
 175 0076 81E0      		ldi r24,lo8(1)
 176 0078 00C0      		rjmp .L1
 177               	.LBE9:
 178               	.LBE10:
 179               	.LBE11:
 180               		.cfi_endproc
 181               	.LFE106:
 183               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 184               	.global	bootmagic_scan_keycode
 186               	bootmagic_scan_keycode:
 187               	.LVL15:
 188               	.LFB107:
 154:tmk_core/common/bootmagic.c **** 
 155:tmk_core/common/bootmagic.c **** /** \brief Bootmagic Scan Keycode
 156:tmk_core/common/bootmagic.c ****  *
 157:tmk_core/common/bootmagic.c ****  * FIXME: needs doc
 158:tmk_core/common/bootmagic.c ****  */
 159:tmk_core/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode) {
 189               		.loc 1 159 46 is_stmt 1 view -0
 190               		.cfi_startproc
 191               		.loc 1 159 46 is_stmt 0 view .LVU36
 192 0000 CF93      		push r28
 193               	.LCFI9:
 194               		.cfi_def_cfa_offset 3
 195               		.cfi_offset 28, -2
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 1 */
 199               	.L__stack_usage = 1
 200 0002 C82F      		mov r28,r24
 160:tmk_core/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 201               		.loc 1 160 5 is_stmt 1 view .LVU37
 202               		.loc 1 160 10 is_stmt 0 view .LVU38
 203 0004 8CE2      		ldi r24,lo8(44)
 204               	.LVL16:
 205               		.loc 1 160 10 view .LVU39
 206 0006 0E94 0000 		call scan_keycode
 207               	.LVL17:
 208               		.loc 1 160 8 view .LVU40
 209 000a 8823      		tst r24
 210 000c 01F0      		breq .L12
 161:tmk_core/common/bootmagic.c **** 
 162:tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 211               		.loc 1 162 5 is_stmt 1 view .LVU41
 212               		.loc 1 162 12 is_stmt 0 view .LVU42
 213 000e 8C2F      		mov r24,r28
 214               	/* epilogue start */
 163:tmk_core/common/bootmagic.c **** }
 215               		.loc 1 163 1 view .LVU43
 216 0010 CF91      		pop r28
 217               	.LVL18:
 162:tmk_core/common/bootmagic.c **** }
 218               		.loc 1 162 12 view .LVU44
 219 0012 0C94 0000 		jmp scan_keycode
 220               	.LVL19:
 221               	.L12:
 222               		.loc 1 163 1 view .LVU45
 223 0016 80E0      		ldi r24,0
 224               	/* epilogue start */
 225 0018 CF91      		pop r28
 226               	.LVL20:
 227               		.loc 1 163 1 view .LVU46
 228 001a 0895      		ret
 229               		.cfi_endproc
 230               	.LFE107:
 232               		.section	.text.bootmagic,"ax",@progbits
 233               	.global	bootmagic
 235               	bootmagic:
 236               	.LFB105:
  19:tmk_core/common/bootmagic.c ****     /* check signature */
 237               		.loc 1 19 22 is_stmt 1 view -0
 238               		.cfi_startproc
 239 0000 CF93      		push r28
 240               	.LCFI10:
 241               		.cfi_def_cfa_offset 3
 242               		.cfi_offset 28, -2
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 1 */
 246               	.L__stack_usage = 1
  21:tmk_core/common/bootmagic.c ****         eeconfig_init();
 247               		.loc 1 21 5 view .LVU48
  21:tmk_core/common/bootmagic.c ****         eeconfig_init();
 248               		.loc 1 21 10 is_stmt 0 view .LVU49
 249 0002 0E94 0000 		call eeconfig_is_enabled
 250               	.LVL21:
  21:tmk_core/common/bootmagic.c ****         eeconfig_init();
 251               		.loc 1 21 8 view .LVU50
 252 0006 8111      		cpse r24,__zero_reg__
 253 0008 00C0      		rjmp .L15
  22:tmk_core/common/bootmagic.c ****     }
 254               		.loc 1 22 9 is_stmt 1 view .LVU51
 255 000a 0E94 0000 		call eeconfig_init
 256               	.LVL22:
 257               	.L15:
  19:tmk_core/common/bootmagic.c ****     /* check signature */
 258               		.loc 1 19 22 is_stmt 0 view .LVU52
 259 000e C5E6      		ldi r28,lo8(101)
 260 0010 00C0      		rjmp .L16
 261               	.LVL23:
 262               	.L17:
  29:tmk_core/common/bootmagic.c ****         wait_ms(10);
 263               		.loc 1 29 9 is_stmt 1 view .LVU53
 264 0012 0E94 0000 		call matrix_scan
 265               	.LVL24:
  30:tmk_core/common/bootmagic.c ****     }
 266               		.loc 1 30 9 view .LVU54
 267               	.LBB12:
 268               	.LBI12:
 269               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** _delay_ms(double __ms)
 270               		.loc 2 166 1 view .LVU55
 271               	.LBB13:
 167:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 	double __tmp ;
 272               		.loc 2 168 2 view .LVU56
 169:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 273               		.loc 2 172 2 view .LVU57
 173:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 274               		.loc 2 173 2 view .LVU58
 174:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 275               		.loc 2 174 2 view .LVU59
 175:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 276               		.loc 2 184 3 view .LVU60
 185:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 277               		.loc 2 187 2 view .LVU61
 278 0016 8FE3      		ldi r24,lo8(-25537)
 279 0018 9CE9      		ldi r25,hi8(-25537)
 280 001a 0197      	1:	sbiw r24,1
 281 001c 01F4      		brne 1b
 282 001e 00C0      		rjmp .
 283 0020 0000      		nop
 284               	.LVL25:
 285               	.L16:
 286               		.loc 2 187 2 is_stmt 0 view .LVU62
 287               	.LBE13:
 288               	.LBE12:
  28:tmk_core/common/bootmagic.c ****         matrix_scan();
 289               		.loc 1 28 11 is_stmt 1 view .LVU63
  28:tmk_core/common/bootmagic.c ****         matrix_scan();
 290               		.loc 1 28 11 is_stmt 0 view .LVU64
 291 0022 C150      		subi r28,lo8(-(-1))
 292               	.LVL26:
  28:tmk_core/common/bootmagic.c ****         matrix_scan();
 293               		.loc 1 28 11 view .LVU65
 294 0024 01F4      		brne .L17
  32:tmk_core/common/bootmagic.c **** 
 295               		.loc 1 32 21 is_stmt 1 view .LVU66
  35:tmk_core/common/bootmagic.c ****         return;
 296               		.loc 1 35 5 view .LVU67
  35:tmk_core/common/bootmagic.c ****         return;
 297               		.loc 1 35 9 is_stmt 0 view .LVU68
 298 0026 89E2      		ldi r24,lo8(41)
 299 0028 0E94 0000 		call bootmagic_scan_keycode
 300               	.LVL27:
  35:tmk_core/common/bootmagic.c ****         return;
 301               		.loc 1 35 8 view .LVU69
 302 002c 8111      		cpse r24,__zero_reg__
 303 002e 00C0      		rjmp .L14
  40:tmk_core/common/bootmagic.c ****         eeconfig_init();
 304               		.loc 1 40 5 is_stmt 1 view .LVU70
  40:tmk_core/common/bootmagic.c ****         eeconfig_init();
 305               		.loc 1 40 9 is_stmt 0 view .LVU71
 306 0030 8AE2      		ldi r24,lo8(42)
 307 0032 0E94 0000 		call bootmagic_scan_keycode
 308               	.LVL28:
  40:tmk_core/common/bootmagic.c ****         eeconfig_init();
 309               		.loc 1 40 8 view .LVU72
 310 0036 8111      		cpse r24,__zero_reg__
  41:tmk_core/common/bootmagic.c ****     }
 311               		.loc 1 41 9 is_stmt 1 view .LVU73
 312 0038 0E94 0000 		call eeconfig_init
 313               	.LVL29:
 314               	.L20:
  45:tmk_core/common/bootmagic.c ****         bootloader_jump();
 315               		.loc 1 45 5 view .LVU74
  45:tmk_core/common/bootmagic.c ****         bootloader_jump();
 316               		.loc 1 45 9 is_stmt 0 view .LVU75
 317 003c 85E0      		ldi r24,lo8(5)
 318 003e 0E94 0000 		call bootmagic_scan_keycode
 319               	.LVL30:
  45:tmk_core/common/bootmagic.c ****         bootloader_jump();
 320               		.loc 1 45 8 view .LVU76
 321 0042 8111      		cpse r24,__zero_reg__
  46:tmk_core/common/bootmagic.c ****     }
 322               		.loc 1 46 9 is_stmt 1 view .LVU77
 323 0044 0E94 0000 		call bootloader_jump
 324               	.LVL31:
 325               	.L21:
  50:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 326               		.loc 1 50 5 view .LVU78
  50:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 327               		.loc 1 50 24 is_stmt 0 view .LVU79
 328 0048 0E94 0000 		call eeconfig_read_debug
 329               	.LVL32:
  50:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 330               		.loc 1 50 22 view .LVU80
 331 004c 8093 0000 		sts debug_config,r24
  51:tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 332               		.loc 1 51 5 is_stmt 1 view .LVU81
  51:tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 333               		.loc 1 51 9 is_stmt 0 view .LVU82
 334 0050 87E0      		ldi r24,lo8(7)
 335 0052 0E94 0000 		call bootmagic_scan_keycode
 336               	.LVL33:
  51:tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 337               		.loc 1 51 8 view .LVU83
 338 0056 8823      		tst r24
 339 0058 01F0      		breq .L22
  52:tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 340               		.loc 1 52 9 is_stmt 1 view .LVU84
  52:tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 341               		.loc 1 52 13 is_stmt 0 view .LVU85
 342 005a 8BE1      		ldi r24,lo8(27)
 343 005c 0E94 0000 		call bootmagic_scan_keycode
 344               	.LVL34:
  52:tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 345               		.loc 1 52 12 view .LVU86
 346 0060 8823      		tst r24
 347 0062 01F4      		brne .+2
 348 0064 00C0      		rjmp .L23
  53:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 349               		.loc 1 53 13 is_stmt 1 view .LVU87
  53:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 350               		.loc 1 53 48 is_stmt 0 view .LVU88
 351 0066 9091 0000 		lds r25,debug_config
  53:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 352               		.loc 1 53 33 view .LVU89
 353 006a 892F      		mov r24,r25
 354 006c 8D7F      		andi r24,~(1<<1)
 355 006e 91FF      		sbrs r25,1
 356 0070 8260      		ori r24,1<<1
 357               	.L103:
  59:tmk_core/common/bootmagic.c ****         }
 358               		.loc 1 59 33 view .LVU90
 359 0072 8093 0000 		sts debug_config,r24
 360               	.L22:
  62:tmk_core/common/bootmagic.c **** 
 361               		.loc 1 62 5 is_stmt 1 view .LVU91
 362 0076 8091 0000 		lds r24,debug_config
 363 007a 0E94 0000 		call eeconfig_update_debug
 364               	.LVL35:
  65:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 365               		.loc 1 65 5 view .LVU92
  65:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 366               		.loc 1 65 25 is_stmt 0 view .LVU93
 367 007e 0E94 0000 		call eeconfig_read_keymap
 368               	.LVL36:
  65:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 369               		.loc 1 65 23 view .LVU94
 370 0082 9093 0000 		sts keymap_config+1,r25
 371 0086 8093 0000 		sts keymap_config,r24
  66:tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 372               		.loc 1 66 5 is_stmt 1 view .LVU95
  66:tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 373               		.loc 1 66 9 is_stmt 0 view .LVU96
 374 008a 80EE      		ldi r24,lo8(-32)
 375 008c 0E94 0000 		call bootmagic_scan_keycode
 376               	.LVL37:
  66:tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 377               		.loc 1 66 8 view .LVU97
 378 0090 8823      		tst r24
 379 0092 01F0      		breq .L26
  67:tmk_core/common/bootmagic.c ****     }
 380               		.loc 1 67 9 is_stmt 1 view .LVU98
  67:tmk_core/common/bootmagic.c ****     }
 381               		.loc 1 67 61 is_stmt 0 view .LVU99
 382 0094 9091 0000 		lds r25,keymap_config
  67:tmk_core/common/bootmagic.c ****     }
 383               		.loc 1 67 45 view .LVU100
 384 0098 892F      		mov r24,r25
 385 009a 8E7F      		andi r24,~(1<<0)
 386 009c 90FF      		sbrs r25,0
 387 009e 8160      		ori r24,1<<0
 388 00a0 8093 0000 		sts keymap_config,r24
 389               	.L26:
  69:tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 390               		.loc 1 69 5 is_stmt 1 view .LVU101
  69:tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 391               		.loc 1 69 9 is_stmt 0 view .LVU102
 392 00a4 89E3      		ldi r24,lo8(57)
 393 00a6 0E94 0000 		call bootmagic_scan_keycode
 394               	.LVL38:
  69:tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 395               		.loc 1 69 8 view .LVU103
 396 00aa 8823      		tst r24
 397 00ac 01F0      		breq .L27
  70:tmk_core/common/bootmagic.c ****     }
 398               		.loc 1 70 9 is_stmt 1 view .LVU104
  70:tmk_core/common/bootmagic.c ****     }
 399               		.loc 1 70 59 is_stmt 0 view .LVU105
 400 00ae 9091 0000 		lds r25,keymap_config
  70:tmk_core/common/bootmagic.c ****     }
 401               		.loc 1 70 43 view .LVU106
 402 00b2 892F      		mov r24,r25
 403 00b4 8D7F      		andi r24,~(1<<1)
 404 00b6 91FF      		sbrs r25,1
 405 00b8 8260      		ori r24,1<<1
 406 00ba 8093 0000 		sts keymap_config,r24
 407               	.L27:
  72:tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 408               		.loc 1 72 5 is_stmt 1 view .LVU107
  72:tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 409               		.loc 1 72 9 is_stmt 0 view .LVU108
 410 00be 82EE      		ldi r24,lo8(-30)
 411 00c0 0E94 0000 		call bootmagic_scan_keycode
 412               	.LVL39:
  72:tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 413               		.loc 1 72 8 view .LVU109
 414 00c4 8823      		tst r24
 415 00c6 01F0      		breq .L28
  73:tmk_core/common/bootmagic.c ****     }
 416               		.loc 1 73 9 is_stmt 1 view .LVU110
  73:tmk_core/common/bootmagic.c ****     }
 417               		.loc 1 73 54 is_stmt 0 view .LVU111
 418 00c8 9091 0000 		lds r25,keymap_config
  73:tmk_core/common/bootmagic.c ****     }
 419               		.loc 1 73 38 view .LVU112
 420 00cc 892F      		mov r24,r25
 421 00ce 8B7F      		andi r24,~(1<<2)
 422 00d0 92FF      		sbrs r25,2
 423 00d2 8460      		ori r24,1<<2
 424 00d4 8093 0000 		sts keymap_config,r24
 425               	.L28:
  75:tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 426               		.loc 1 75 5 is_stmt 1 view .LVU113
  75:tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 427               		.loc 1 75 9 is_stmt 0 view .LVU114
 428 00d8 86EE      		ldi r24,lo8(-26)
 429 00da 0E94 0000 		call bootmagic_scan_keycode
 430               	.LVL40:
  75:tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 431               		.loc 1 75 8 view .LVU115
 432 00de 8823      		tst r24
 433 00e0 01F0      		breq .L29
  76:tmk_core/common/bootmagic.c ****     }
 434               		.loc 1 76 9 is_stmt 1 view .LVU116
  76:tmk_core/common/bootmagic.c ****     }
 435               		.loc 1 76 54 is_stmt 0 view .LVU117
 436 00e2 9091 0000 		lds r25,keymap_config
  76:tmk_core/common/bootmagic.c ****     }
 437               		.loc 1 76 38 view .LVU118
 438 00e6 892F      		mov r24,r25
 439 00e8 877F      		andi r24,~(1<<3)
 440 00ea 93FF      		sbrs r25,3
 441 00ec 8860      		ori r24,1<<3
 442 00ee 8093 0000 		sts keymap_config,r24
 443               	.L29:
  78:tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 444               		.loc 1 78 5 is_stmt 1 view .LVU119
  78:tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 445               		.loc 1 78 9 is_stmt 0 view .LVU120
 446 00f2 83EE      		ldi r24,lo8(-29)
 447 00f4 0E94 0000 		call bootmagic_scan_keycode
 448               	.LVL41:
  78:tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 449               		.loc 1 78 8 view .LVU121
 450 00f8 8823      		tst r24
 451 00fa 01F0      		breq .L30
  79:tmk_core/common/bootmagic.c ****     }
 452               		.loc 1 79 9 is_stmt 1 view .LVU122
  79:tmk_core/common/bootmagic.c ****     }
 453               		.loc 1 79 46 is_stmt 0 view .LVU123
 454 00fc 9091 0000 		lds r25,keymap_config
  79:tmk_core/common/bootmagic.c ****     }
 455               		.loc 1 79 30 view .LVU124
 456 0100 892F      		mov r24,r25
 457 0102 8F7E      		andi r24,~(1<<4)
 458 0104 94FF      		sbrs r25,4
 459 0106 8061      		ori r24,1<<4
 460 0108 8093 0000 		sts keymap_config,r24
 461               	.L30:
  81:tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 462               		.loc 1 81 5 is_stmt 1 view .LVU125
  81:tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 463               		.loc 1 81 9 is_stmt 0 view .LVU126
 464 010c 85E3      		ldi r24,lo8(53)
 465 010e 0E94 0000 		call bootmagic_scan_keycode
 466               	.LVL42:
  81:tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 467               		.loc 1 81 8 view .LVU127
 468 0112 8823      		tst r24
 469 0114 01F0      		breq .L31
  82:tmk_core/common/bootmagic.c ****     }
 470               		.loc 1 82 9 is_stmt 1 view .LVU128
  82:tmk_core/common/bootmagic.c ****     }
 471               		.loc 1 82 54 is_stmt 0 view .LVU129
 472 0116 9091 0000 		lds r25,keymap_config
  82:tmk_core/common/bootmagic.c ****     }
 473               		.loc 1 82 38 view .LVU130
 474 011a 892F      		mov r24,r25
 475 011c 8F7D      		andi r24,~(1<<5)
 476 011e 95FF      		sbrs r25,5
 477 0120 8062      		ori r24,1<<5
 478 0122 8093 0000 		sts keymap_config,r24
 479               	.L31:
  84:tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 480               		.loc 1 84 5 is_stmt 1 view .LVU131
  84:tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 481               		.loc 1 84 9 is_stmt 0 view .LVU132
 482 0126 81E3      		ldi r24,lo8(49)
 483 0128 0E94 0000 		call bootmagic_scan_keycode
 484               	.LVL43:
  84:tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 485               		.loc 1 84 8 view .LVU133
 486 012c 8823      		tst r24
 487 012e 01F0      		breq .L32
  85:tmk_core/common/bootmagic.c ****     }
 488               		.loc 1 85 9 is_stmt 1 view .LVU134
  85:tmk_core/common/bootmagic.c ****     }
 489               		.loc 1 85 64 is_stmt 0 view .LVU135
 490 0130 9091 0000 		lds r25,keymap_config
  85:tmk_core/common/bootmagic.c ****     }
 491               		.loc 1 85 48 view .LVU136
 492 0134 892F      		mov r24,r25
 493 0136 8F7B      		andi r24,~(1<<6)
 494 0138 96FF      		sbrs r25,6
 495 013a 8064      		ori r24,1<<6
 496 013c 8093 0000 		sts keymap_config,r24
 497               	.L32:
  87:tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 498               		.loc 1 87 5 is_stmt 1 view .LVU137
  87:tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 499               		.loc 1 87 9 is_stmt 0 view .LVU138
 500 0140 81E1      		ldi r24,lo8(17)
 501 0142 0E94 0000 		call bootmagic_scan_keycode
 502               	.LVL44:
  87:tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 503               		.loc 1 87 8 view .LVU139
 504 0146 8823      		tst r24
 505 0148 01F0      		breq .L33
  88:tmk_core/common/bootmagic.c ****     }
 506               		.loc 1 88 9 is_stmt 1 view .LVU140
  88:tmk_core/common/bootmagic.c ****     }
 507               		.loc 1 88 44 is_stmt 0 view .LVU141
 508 014a 9091 0000 		lds r25,keymap_config
  88:tmk_core/common/bootmagic.c ****     }
 509               		.loc 1 88 28 view .LVU142
 510 014e 892F      		mov r24,r25
 511 0150 97FB      		bst r25,7
 512 0152 87F9      		bld r24,7
 513 0154 8058      		subi r24,0x80
 514 0156 8093 0000 		sts keymap_config,r24
 515               	.L33:
  90:tmk_core/common/bootmagic.c **** 
 516               		.loc 1 90 5 is_stmt 1 view .LVU143
 517 015a 8091 0000 		lds r24,keymap_config
 518 015e 9091 0000 		lds r25,keymap_config+1
 519 0162 0E94 0000 		call eeconfig_update_keymap
 520               	.LVL45:
  93:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) {
 521               		.loc 1 93 5 view .LVU144
  94:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 0);
 522               		.loc 1 94 5 view .LVU145
  94:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 0);
 523               		.loc 1 94 9 is_stmt 0 view .LVU146
 524 0166 87E2      		ldi r24,lo8(39)
 525 0168 0E94 0000 		call bootmagic_scan_keycode
 526               	.LVL46:
 527 016c C82F      		mov r28,r24
 528               	.LVL47:
  97:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 1);
 529               		.loc 1 97 5 is_stmt 1 view .LVU147
  97:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 1);
 530               		.loc 1 97 9 is_stmt 0 view .LVU148
 531 016e 8EE1      		ldi r24,lo8(30)
 532               	.LVL48:
  97:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 1);
 533               		.loc 1 97 9 view .LVU149
 534 0170 0E94 0000 		call bootmagic_scan_keycode
 535               	.LVL49:
  97:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 1);
 536               		.loc 1 97 8 view .LVU150
 537 0174 8111      		cpse r24,__zero_reg__
  98:tmk_core/common/bootmagic.c ****     }
 538               		.loc 1 98 9 is_stmt 1 view .LVU151
  98:tmk_core/common/bootmagic.c ****     }
 539               		.loc 1 98 23 is_stmt 0 view .LVU152
 540 0176 C260      		ori r28,lo8(2)
 541               	.LVL50:
 542               	.L34:
 100:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 2);
 543               		.loc 1 100 5 is_stmt 1 view .LVU153
 100:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 2);
 544               		.loc 1 100 9 is_stmt 0 view .LVU154
 545 0178 8FE1      		ldi r24,lo8(31)
 546 017a 0E94 0000 		call bootmagic_scan_keycode
 547               	.LVL51:
 100:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 2);
 548               		.loc 1 100 8 view .LVU155
 549 017e 8111      		cpse r24,__zero_reg__
 101:tmk_core/common/bootmagic.c ****     }
 550               		.loc 1 101 9 is_stmt 1 view .LVU156
 101:tmk_core/common/bootmagic.c ****     }
 551               		.loc 1 101 23 is_stmt 0 view .LVU157
 552 0180 C460      		ori r28,lo8(4)
 553               	.LVL52:
 554               	.L35:
 103:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 3);
 555               		.loc 1 103 5 is_stmt 1 view .LVU158
 103:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 3);
 556               		.loc 1 103 9 is_stmt 0 view .LVU159
 557 0182 80E2      		ldi r24,lo8(32)
 558 0184 0E94 0000 		call bootmagic_scan_keycode
 559               	.LVL53:
 103:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 3);
 560               		.loc 1 103 8 view .LVU160
 561 0188 8111      		cpse r24,__zero_reg__
 104:tmk_core/common/bootmagic.c ****     }
 562               		.loc 1 104 9 is_stmt 1 view .LVU161
 104:tmk_core/common/bootmagic.c ****     }
 563               		.loc 1 104 23 is_stmt 0 view .LVU162
 564 018a C860      		ori r28,lo8(8)
 565               	.LVL54:
 566               	.L36:
 106:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 4);
 567               		.loc 1 106 5 is_stmt 1 view .LVU163
 106:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 4);
 568               		.loc 1 106 9 is_stmt 0 view .LVU164
 569 018c 81E2      		ldi r24,lo8(33)
 570 018e 0E94 0000 		call bootmagic_scan_keycode
 571               	.LVL55:
 106:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 4);
 572               		.loc 1 106 8 view .LVU165
 573 0192 8111      		cpse r24,__zero_reg__
 107:tmk_core/common/bootmagic.c ****     }
 574               		.loc 1 107 9 is_stmt 1 view .LVU166
 107:tmk_core/common/bootmagic.c ****     }
 575               		.loc 1 107 23 is_stmt 0 view .LVU167
 576 0194 C061      		ori r28,lo8(16)
 577               	.LVL56:
 578               	.L37:
 109:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 5);
 579               		.loc 1 109 5 is_stmt 1 view .LVU168
 109:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 5);
 580               		.loc 1 109 9 is_stmt 0 view .LVU169
 581 0196 82E2      		ldi r24,lo8(34)
 582 0198 0E94 0000 		call bootmagic_scan_keycode
 583               	.LVL57:
 109:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 5);
 584               		.loc 1 109 8 view .LVU170
 585 019c 8111      		cpse r24,__zero_reg__
 110:tmk_core/common/bootmagic.c ****     }
 586               		.loc 1 110 9 is_stmt 1 view .LVU171
 110:tmk_core/common/bootmagic.c ****     }
 587               		.loc 1 110 23 is_stmt 0 view .LVU172
 588 019e C062      		ori r28,lo8(32)
 589               	.LVL58:
 590               	.L38:
 112:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 6);
 591               		.loc 1 112 5 is_stmt 1 view .LVU173
 112:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 6);
 592               		.loc 1 112 9 is_stmt 0 view .LVU174
 593 01a0 83E2      		ldi r24,lo8(35)
 594 01a2 0E94 0000 		call bootmagic_scan_keycode
 595               	.LVL59:
 112:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 6);
 596               		.loc 1 112 8 view .LVU175
 597 01a6 8111      		cpse r24,__zero_reg__
 113:tmk_core/common/bootmagic.c ****     }
 598               		.loc 1 113 9 is_stmt 1 view .LVU176
 113:tmk_core/common/bootmagic.c ****     }
 599               		.loc 1 113 23 is_stmt 0 view .LVU177
 600 01a8 C064      		ori r28,lo8(64)
 601               	.LVL60:
 602               	.L39:
 115:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 7);
 603               		.loc 1 115 5 is_stmt 1 view .LVU178
 115:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 7);
 604               		.loc 1 115 9 is_stmt 0 view .LVU179
 605 01aa 84E2      		ldi r24,lo8(36)
 606 01ac 0E94 0000 		call bootmagic_scan_keycode
 607               	.LVL61:
 115:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 7);
 608               		.loc 1 115 8 view .LVU180
 609 01b0 8823      		tst r24
 610 01b2 01F4      		brne .+2
 611 01b4 00C0      		rjmp .L40
 116:tmk_core/common/bootmagic.c ****     }
 612               		.loc 1 116 9 is_stmt 1 view .LVU181
 116:tmk_core/common/bootmagic.c ****     }
 613               		.loc 1 116 23 is_stmt 0 view .LVU182
 614 01b6 C068      		ori r28,lo8(-128)
 615               	.LVL62:
 118:tmk_core/common/bootmagic.c ****         eeconfig_update_default_layer(default_layer);
 616               		.loc 1 118 5 is_stmt 1 view .LVU183
 617               	.L41:
 119:tmk_core/common/bootmagic.c ****         default_layer_set((layer_state_t)default_layer);
 618               		.loc 1 119 9 view .LVU184
 619 01b8 8C2F      		mov r24,r28
 620 01ba 0E94 0000 		call eeconfig_update_default_layer
 621               	.LVL63:
 120:tmk_core/common/bootmagic.c ****     } else {
 622               		.loc 1 120 9 view .LVU185
 623 01be 6C2F      		mov r22,r28
 624               	.LVL64:
 625               	.L104:
 123:tmk_core/common/bootmagic.c ****     }
 626               		.loc 1 123 9 is_stmt 0 view .LVU186
 627 01c0 70E0      		ldi r23,0
 628 01c2 90E0      		ldi r25,0
 629 01c4 80E0      		ldi r24,0
 630 01c6 0E94 0000 		call default_layer_set
 631               	.LVL65:
 126:tmk_core/common/bootmagic.c **** 
 632               		.loc 1 126 5 is_stmt 1 view .LVU187
 633 01ca 6091 0000 		lds r22,layer_state
 634 01ce 7091 0000 		lds r23,layer_state+1
 635 01d2 8091 0000 		lds r24,layer_state+2
 636 01d6 9091 0000 		lds r25,layer_state+3
 637 01da 0E94 0000 		call layer_state_set_kb
 638               	.LVL66:
 129:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(true);
 639               		.loc 1 129 5 view .LVU188
 129:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(true);
 640               		.loc 1 129 9 is_stmt 0 view .LVU189
 641 01de 8FE0      		ldi r24,lo8(15)
 642 01e0 0E94 0000 		call bootmagic_scan_keycode
 643               	.LVL67:
 129:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(true);
 644               		.loc 1 129 8 view .LVU190
 645 01e4 8823      		tst r24
 646 01e6 01F0      		breq .L44
 130:tmk_core/common/bootmagic.c ****     }
 647               		.loc 1 130 9 is_stmt 1 view .LVU191
 648 01e8 81E0      		ldi r24,lo8(1)
 649 01ea 0E94 0000 		call eeconfig_update_handedness
 650               	.LVL68:
 651               	.L44:
 132:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(false);
 652               		.loc 1 132 5 view .LVU192
 132:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(false);
 653               		.loc 1 132 9 is_stmt 0 view .LVU193
 654 01ee 85E1      		ldi r24,lo8(21)
 655 01f0 0E94 0000 		call bootmagic_scan_keycode
 656               	.LVL69:
 132:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(false);
 657               		.loc 1 132 8 view .LVU194
 658 01f4 8823      		tst r24
 659 01f6 01F0      		breq .L14
 133:tmk_core/common/bootmagic.c ****     }
 660               		.loc 1 133 9 is_stmt 1 view .LVU195
 661 01f8 80E0      		ldi r24,0
 662               	/* epilogue start */
 135:tmk_core/common/bootmagic.c **** 
 663               		.loc 1 135 1 is_stmt 0 view .LVU196
 664 01fa CF91      		pop r28
 133:tmk_core/common/bootmagic.c ****     }
 665               		.loc 1 133 9 view .LVU197
 666 01fc 0C94 0000 		jmp eeconfig_update_handedness
 667               	.LVL70:
 668               	.L23:
  54:tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 669               		.loc 1 54 16 is_stmt 1 view .LVU198
  54:tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 670               		.loc 1 54 20 is_stmt 0 view .LVU199
 671 0200 8EE0      		ldi r24,lo8(14)
 672 0202 0E94 0000 		call bootmagic_scan_keycode
 673               	.LVL71:
  54:tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 674               		.loc 1 54 19 view .LVU200
 675 0206 8823      		tst r24
 676 0208 01F0      		breq .L24
  55:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 677               		.loc 1 55 13 is_stmt 1 view .LVU201
  55:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 678               		.loc 1 55 50 is_stmt 0 view .LVU202
 679 020a 9091 0000 		lds r25,debug_config
  55:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 680               		.loc 1 55 35 view .LVU203
 681 020e 892F      		mov r24,r25
 682 0210 8B7F      		andi r24,~(1<<2)
 683 0212 92FF      		sbrs r25,2
 684 0214 8460      		ori r24,1<<2
 685 0216 00C0      		rjmp .L103
 686               	.L24:
  56:tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 687               		.loc 1 56 16 is_stmt 1 view .LVU204
  56:tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 688               		.loc 1 56 20 is_stmt 0 view .LVU205
 689 0218 80E1      		ldi r24,lo8(16)
 690 021a 0E94 0000 		call bootmagic_scan_keycode
 691               	.LVL72:
 692 021e 9091 0000 		lds r25,debug_config
  56:tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 693               		.loc 1 56 19 view .LVU206
 694 0222 8823      		tst r24
 695 0224 01F0      		breq .L25
  57:tmk_core/common/bootmagic.c ****         } else {
 696               		.loc 1 57 13 is_stmt 1 view .LVU207
  57:tmk_core/common/bootmagic.c ****         } else {
 697               		.loc 1 57 32 is_stmt 0 view .LVU208
 698 0226 892F      		mov r24,r25
 699 0228 877F      		andi r24,~(1<<3)
 700 022a 93FF      		sbrs r25,3
 701 022c 8860      		ori r24,1<<3
 702 022e 00C0      		rjmp .L103
 703               	.L25:
  59:tmk_core/common/bootmagic.c ****         }
 704               		.loc 1 59 13 is_stmt 1 view .LVU209
  59:tmk_core/common/bootmagic.c ****         }
 705               		.loc 1 59 33 is_stmt 0 view .LVU210
 706 0230 892F      		mov r24,r25
 707 0232 8E7F      		andi r24,~(1<<0)
 708 0234 90FF      		sbrs r25,0
 709 0236 8160      		ori r24,1<<0
 710 0238 00C0      		rjmp .L103
 711               	.LVL73:
 712               	.L40:
 118:tmk_core/common/bootmagic.c ****         eeconfig_update_default_layer(default_layer);
 713               		.loc 1 118 5 is_stmt 1 view .LVU211
 118:tmk_core/common/bootmagic.c ****         eeconfig_update_default_layer(default_layer);
 714               		.loc 1 118 8 is_stmt 0 view .LVU212
 715 023a C111      		cpse r28,__zero_reg__
 716 023c 00C0      		rjmp .L41
 122:tmk_core/common/bootmagic.c ****         default_layer_set((layer_state_t)default_layer);
 717               		.loc 1 122 9 is_stmt 1 view .LVU213
 122:tmk_core/common/bootmagic.c ****         default_layer_set((layer_state_t)default_layer);
 718               		.loc 1 122 25 is_stmt 0 view .LVU214
 719 023e 0E94 0000 		call eeconfig_read_default_layer
 720               	.LVL74:
 123:tmk_core/common/bootmagic.c ****     }
 721               		.loc 1 123 9 is_stmt 1 view .LVU215
 722 0242 682F      		mov r22,r24
 723 0244 00C0      		rjmp .L104
 724               	.LVL75:
 725               	.L14:
 726               	/* epilogue start */
 135:tmk_core/common/bootmagic.c **** 
 727               		.loc 1 135 1 is_stmt 0 view .LVU216
 728 0246 CF91      		pop r28
 729 0248 0895      		ret
 730               		.cfi_endproc
 731               	.LFE105:
 733               		.comm	keymap_config,2,1
 734               		.text
 735               	.Letext0:
 736               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/stdint.h"
 737               		.file 4 "quantum/matrix.h"
 738               		.file 5 "tmk_core/common/debug.h"
 739               		.file 6 "tmk_core/common/keyboard.h"
 740               		.file 7 "tmk_core/common/action.h"
 741               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 742               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 743               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 744               		.file 11 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 745               		.file 12 "/usr/local/Cellar/avr-gcc@8/8.4.0_1/avr/include/stdio.h"
 746               		.file 13 "tmk_core/common/host.h"
 747               		.file 14 "quantum/keycode_config.h"
 748               		.file 15 "quantum/keymap.h"
 749               		.file 16 "tmk_core/common/action_layer.h"
 750               		.file 17 "tmk_core/common/eeconfig.h"
 751               		.file 18 "tmk_core/common/bootloader.h"
 752               		.file 19 "tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
/var/folders/_7/b1vvw0zx42g3yw9l_q10bzth0000gn/T//ccScOmDd.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_7/b1vvw0zx42g3yw9l_q10bzth0000gn/T//ccScOmDd.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_7/b1vvw0zx42g3yw9l_q10bzth0000gn/T//ccScOmDd.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_7/b1vvw0zx42g3yw9l_q10bzth0000gn/T//ccScOmDd.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_7/b1vvw0zx42g3yw9l_q10bzth0000gn/T//ccScOmDd.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_7/b1vvw0zx42g3yw9l_q10bzth0000gn/T//ccScOmDd.s:12     .text.scan_keycode:0000000000000000 scan_keycode
/var/folders/_7/b1vvw0zx42g3yw9l_q10bzth0000gn/T//ccScOmDd.s:186    .text.bootmagic_scan_keycode:0000000000000000 bootmagic_scan_keycode
/var/folders/_7/b1vvw0zx42g3yw9l_q10bzth0000gn/T//ccScOmDd.s:235    .text.bootmagic:0000000000000000 bootmagic
                            *COM*:0000000000000002 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_update_debug
eeconfig_read_keymap
eeconfig_update_keymap
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set_kb
eeconfig_update_handedness
eeconfig_read_default_layer
__do_clear_bss
